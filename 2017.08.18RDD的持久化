RDD的持久化
	rdd.cache() //将rdd持久化到内存 等同于 StorageLevel.MEMORY_ONLY
	rdd.persist(StorageLevel.MEMORY_ONLY)
	
	1. 优先选择MEMORY_ONLY，如果可以用内存缓存所有的数据，那么
	也就意味着我的计算是纯内存的计算，速度当然快。
	2. MEMORY_ONLY缓存不了所有数据，MEMORY_ONLY_SER把数据实现序列
	化然后进行存储。这样也是纯内存操作，速度也快，只不过需要耗
	费一点cpu资源需要反序列化。
	3. 可以选用带2这种方式。恢复速度的时候可以使用备份。不需要
	重新计算
	4. 能不使用DISK的, 就不使用DISK,有时候从磁盘读，还不如重新
	计算一次。
	
Tachyon
	tachyon是一个内存分布式文件系统。它是一个开源系统，是一个
	以jvm为base的系统。
	
	为什么会出现tachyon?
	
	以内存替换有磁盘，就可以明显的减小延时，所以涌现出来很多基于
	内存的计算工具，如spark这个计算框架。
	
	1. spark运行以jvm为基础，所以spark的任务会把数据存入jvm的堆中
	，随着计算的迭代，jvm堆中存入的数据量迅速增大，对于spark而言，
	spark的计算引擎和存储引擎处在同一个jvm中，所以会有重复的gc方面的
	开销。这样就增大了系统的延时
	
	2. 当jvm崩溃时，缓存在jvm堆中的数据也会消失，这个时候spark不得
	不根据rdd的血缘关系重新计算数据。
	
	3. 如果spark需要和其他的框架共享数据，比如hadoop的MapReduce
	这个时候就必须通过第三方来共享，比如借助hdfs,那么这样的话，
	就需要额外的开销，借助的是hdfs,那么就需要磁盘io的开销
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	